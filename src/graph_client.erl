
% This file is automatically generated by msgpack-idl.
-module(graph_client).
-author('@msgpack-idl').

-include("graph_types.hrl").
-export([connect/3, connect/4, close/0, close/1]).



-export([create_node/1, remove_node/2, update_node/3, create_edge/3, update_edge/4, remove_edge/3, centrality/4, add_centrality_query/2, add_shortest_path_query/2, remove_centrality_query/2, remove_shortest_path_query/2, shortest_path/2, update_index/1, clear/1, get_node/2, get_edge/3, save/2, load/2, get_status/1, create_node_here/2, create_global_node/2, remove_global_node/2, create_edge_here/3]).  
  
connect(Host,Port,Options)->
    connect(?MODULE ,Host,Port,Options).

connect(Id, Host,Port,Options)->
    gen_msgpack_rpc:start_link({local,Id},?MODULE,Host,Port,Options).

close(Id)->
    gen_msgpack_rpc:stop(Id).

close()->
    gen_msgpack_rpc:stop(?MODULE).


-spec create_node(mp_string()) -> mp_string().
create_node(Name) ->
    gen_msgpack_rpc:call(?MODULE, create_node, [Name]).

-spec remove_node(mp_string(), mp_string()) -> non_neg_integer().
remove_node(Name, Nid) ->
    gen_msgpack_rpc:call(?MODULE, remove_node, [Name, Nid]).

-spec update_node(mp_string(), mp_string(), property()) -> non_neg_integer().
update_node(Name, Nid, P) ->
    gen_msgpack_rpc:call(?MODULE, update_node, [Name, Nid, P]).

-spec create_edge(mp_string(), mp_string(), edge_info()) -> non_neg_integer().
create_edge(Name, Nid, Ei) ->
    gen_msgpack_rpc:call(?MODULE, create_edge, [Name, Nid, Ei]).

-spec update_edge(mp_string(), mp_string(), edge_id_t(), edge_info()) -> non_neg_integer().
update_edge(Name, Nid, Eid, Ei) ->
    gen_msgpack_rpc:call(?MODULE, update_edge, [Name, Nid, Eid, Ei]).

-spec remove_edge(mp_string(), mp_string(), edge_id_t()) -> non_neg_integer().
remove_edge(Name, Nid, E) ->
    gen_msgpack_rpc:call(?MODULE, remove_edge, [Name, Nid, E]).

-spec centrality(mp_string(), mp_string(), centrality_type(), preset_query()) -> float().
centrality(Name, Nid, Ct, Q) ->
    gen_msgpack_rpc:call(?MODULE, centrality, [Name, Nid, Ct, Q]).

-spec add_centrality_query(mp_string(), preset_query()) -> boolean().
add_centrality_query(Name, Q) ->
    gen_msgpack_rpc:call(?MODULE, add_centrality_query, [Name, Q]).

-spec add_shortest_path_query(mp_string(), preset_query()) -> boolean().
add_shortest_path_query(Name, Q) ->
    gen_msgpack_rpc:call(?MODULE, add_shortest_path_query, [Name, Q]).

-spec remove_centrality_query(mp_string(), preset_query()) -> boolean().
remove_centrality_query(Name, Q) ->
    gen_msgpack_rpc:call(?MODULE, remove_centrality_query, [Name, Q]).

-spec remove_shortest_path_query(mp_string(), preset_query()) -> boolean().
remove_shortest_path_query(Name, Q) ->
    gen_msgpack_rpc:call(?MODULE, remove_shortest_path_query, [Name, Q]).

-spec shortest_path(mp_string(), shortest_path_req()) -> list(node_id()).
shortest_path(Name, R) ->
    gen_msgpack_rpc:call(?MODULE, shortest_path, [Name, R]).

-spec update_index(mp_string()) -> non_neg_integer().
update_index(Name) ->
    gen_msgpack_rpc:call(?MODULE, update_index, [Name]).

-spec clear(mp_string()) -> non_neg_integer().
clear(Name) ->
    gen_msgpack_rpc:call(?MODULE, clear, [Name]).

-spec get_node(mp_string(), mp_string()) -> node_info().
get_node(Name, Nid) ->
    gen_msgpack_rpc:call(?MODULE, get_node, [Name, Nid]).

-spec get_edge(mp_string(), mp_string(), edge_id_t()) -> edge_info().
get_edge(Name, Nid, E) ->
    gen_msgpack_rpc:call(?MODULE, get_edge, [Name, Nid, E]).

-spec save(mp_string(), mp_string()) -> boolean().
save(Name, Arg1) ->
    gen_msgpack_rpc:call(?MODULE, save, [Name, Arg1]).

-spec load(mp_string(), mp_string()) -> boolean().
load(Name, Arg1) ->
    gen_msgpack_rpc:call(?MODULE, load, [Name, Arg1]).

-spec get_status(mp_string()) -> list({mp_string(), list({mp_string(), mp_string()})}).
get_status(Name) ->
    gen_msgpack_rpc:call(?MODULE, get_status, [Name]).

-spec create_node_here(mp_string(), mp_string()) -> non_neg_integer().
create_node_here(Name, Nid) ->
    gen_msgpack_rpc:call(?MODULE, create_node_here, [Name, Nid]).

-spec create_global_node(mp_string(), mp_string()) -> non_neg_integer().
create_global_node(Name, Nid) ->
    gen_msgpack_rpc:call(?MODULE, create_global_node, [Name, Nid]).

-spec remove_global_node(mp_string(), mp_string()) -> non_neg_integer().
remove_global_node(Name, Nid) ->
    gen_msgpack_rpc:call(?MODULE, remove_global_node, [Name, Nid]).

-spec create_edge_here(mp_string(), edge_id_t(), edge_info()) -> non_neg_integer().
create_edge_here(Name, Eid, Ei) ->
    gen_msgpack_rpc:call(?MODULE, create_edge_here, [Name, Eid, Ei]).


